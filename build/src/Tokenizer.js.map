{"version":3,"sources":["../../develop/src/Tokenizer.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAmB,UAAU;;;;0BACN,cAAc;;;;uBACjB,WAAW;;;;IAEzB,SAAS;AAEA,aAFT,SAAS,GAEG;8BAFZ,SAAS;KAIV;;iBAJC,SAAS;;eAMN,eAAC,OAAO,EAAE;AACZ,gBAAI,MAAM,GAAG,MAAM,CAAC,IAAI,qBAAQ,CACX,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,sBAAS,CAAC,CACnD,MAAM,CAAC,UAAA,YAAY;uBAAI,OAAO,YAAY,KAAK,WAAW;aAAA,CAAC,CAC3D,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAE7D,gBAAG,MAAM,CAAC,MAAM,KAAK,CAAC,EACtB;AACI,uBAAO,CAAC,GAAG,yBAAuB,OAAO,CAAG,CAAC;aAChD;;AAEH,mBAAO,MAAM,CAAC,CAAC,CAAC,CAAC;SAClB;;;eAEY,uBAAC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE;AACtC,gBAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,EACzC;AACI,uBAAO,EAAC,SAAS,EAAT,SAAS,EAAE,OAAO,EAAP,OAAO,EAAC,CAAC;aAC/B;;AAED,mBAAO,EAAC,OAAO,EAAP,OAAO,EAAC,CAAC;SACpB;;;eAEkB,6BAAC,kBAAkB,EACtC;AACI,gBAAI,MAAM,GAAG,kBAAkB,CAAC,OAAO,CAAC;AACxC,gBAAG,oBAAO,kBAAkB,CAAC,SAAS,CAAC,EACvC;AACI,sBAAM,GAAG,oBAAO,kBAAkB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;aACpF;;AAED,mBAAO,MAAM,CAAC;SACjB;;;WAtCC,SAAS;;;qBA0CA,SAAS","file":"Tokenizer.js","sourcesContent":["import Regexs from './Regexs';\r\nimport RegexNames from './RegexNames';\r\nimport Parsers from './Parsers';\r\n\r\nclass Tokenizer {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    parse(element) {\r\n       let parsed = Object.keys(Regexs).\r\n                            map(this.discoverRegex.bind(this, element, Regexs)).\r\n                            filter(regexElement => typeof regexElement !== 'undefined').\r\n                            map(this.parseElementByRegex.bind(this));\r\n\r\n        if(parsed.length === 0)\r\n        {\r\n            console.log(`No regex found for ${element}`);\r\n        }\r\n\r\n      return parsed[0];\r\n    }\r\n\r\n    discoverRegex(element, regexs, regexName) {\r\n        if(element.match(regexs[regexName].regex))\r\n        {\r\n            return {regexName, element};\r\n        }\r\n\r\n        return {element};\r\n    }\r\n\r\n    parseElementByRegex(regexElementCouple)\r\n    {\r\n        let result = regexElementCouple.element;\r\n        if(Regexs[regexElementCouple.regexName])\r\n        {\r\n            result = Regexs[regexElementCouple.regexName].parser(regexElementCouple.element);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nexport default Tokenizer;"]}