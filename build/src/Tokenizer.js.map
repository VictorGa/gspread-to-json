{"version":3,"sources":["../../develop/src/Tokenizer.js"],"names":[],"mappings":";;;;;;;;;;;;;;sBAAmB,UAAU;;;;0BACN,cAAc;;;;uBACjB,WAAW;;;;IAEzB,SAAS;UAAT,SAAS;wBAAT,SAAS;;;;;;;;;cAAT,SAAS;;;;;;;;;;SASM,uBAAC,OAAO,EAAE,MAAM,EAAE,SAAS,EAC/C;AACC,OAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,EACzC;AACC,WAAO,EAAC,SAAS,EAAT,SAAS,EAAE,OAAO,EAAP,OAAO,EAAC,CAAC;IAC5B;;AAED,UAAO,EAAC,OAAO,EAAP,OAAO,EAAC,CAAC;GACjB;;;;;;;;;SAOyB,6BAAC,kBAAkB,EAC7C;AACC,OAAI,MAAM,GAAG,kBAAkB,CAAC,OAAO,CAAC;AACxC,OAAG,oBAAO,kBAAkB,CAAC,SAAS,CAAC,EACvC;AACC,UAAM,GAAG,oBAAO,kBAAkB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;IACjF;;AAED,UAAO,MAAM,CAAC;GACd;;;QAjCI,SAAS;;;AA0CR,SAAS,KAAK,CAAC,OAAO,EAC7B;AACC,KAAI,MAAM,GAAG,MAAM,CAAC,IAAI,qBAAQ,CAChC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,sBAAS,CAAC,CACxD,MAAM,CAAC,UAAA,YAAY;SAAI,OAAO,YAAY,KAAK,WAAW;EAAA,CAAC,CAC3D,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAE9C,KAAG,MAAM,CAAC,MAAM,KAAK,CAAC,EACtB;AACC,SAAO,CAAC,GAAG,yBAAuB,OAAO,CAAG,CAAC;EAC7C;;AAED,QAAO,MAAM,CAAC,CAAC,CAAC,CAAC;CACjB;;qBAEc,SAAS","file":"Tokenizer.js","sourcesContent":["import Regexs from './Regexs';\nimport RegexNames from './RegexNames';\nimport Parsers from './Parsers';\n\nclass Tokenizer {\n\n\t/**\n\t * Check if regex match\n\t * @param element\n\t * @param regexs\n\t * @param regexName\n\t * @returns {*}\n\t */\n\tstatic discoverRegex(element, regexs, regexName)\n\t{\n\t\tif(element.match(regexs[regexName].regex))\n\t\t{\n\t\t\treturn {regexName, element};\n\t\t}\n\n\t\treturn {element};\n\t}\n\n\t/**\n\t * Apply correct regex\n\t * @param regexElementCouple\n\t * @returns {*}\n\t */\n\tstatic parseElementByRegex(regexElementCouple)\n\t{\n\t\tlet result = regexElementCouple.element;\n\t\tif(Regexs[regexElementCouple.regexName])\n\t\t{\n\t\t\tresult = Regexs[regexElementCouple.regexName].parser(regexElementCouple.element);\n\t\t}\n\n\t\treturn result;\n\t}\n\n}\n\n/**\n * Check which rule to apply for the current element\n * @param element\n * @returns {*}\n */\nexport function parse(element)\n{\n\tlet parsed = Object.keys(Regexs).\n\tmap(Tokenizer.discoverRegex.bind(this, element, Regexs)).\n\tfilter(regexElement => typeof regexElement !== 'undefined').\n\tmap(Tokenizer.parseElementByRegex.bind(this));\n\n\tif(parsed.length === 0)\n\t{\n\t\tconsole.log(`No regex found for ${element}`);\n\t}\n\n\treturn parsed[0];\n}\n\nexport default Tokenizer;"]}