{"version":3,"sources":["../../develop/src/Tokenizer.js"],"names":[],"mappings":";;;;;;;;;;;;;;sBAAmB,UAAU;;;;0BACN,cAAc;;;;uBACjB,WAAW;;;;IAEzB,SAAS;UAAT,SAAS;wBAAT,SAAS;;;;;;;;;cAAT,SAAS;;;;;;;;;;SASM,uBAAC,OAAO,EAAE,MAAM,EAAE,SAAS,EAC/C;AACC,OAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,EACzC;AACC,WAAO,EAAC,SAAS,EAAT,SAAS,EAAE,OAAO,EAAP,OAAO,EAAC,CAAC;IAC5B;;AAED,UAAO,EAAC,OAAO,EAAP,OAAO,EAAC,CAAC;GACjB;;;;;;;;;SAOyB,6BAAC,kBAAkB,EAC7C;AACC,OAAI,MAAM,GAAG,kBAAkB,CAAC,OAAO,CAAC;;AAExC,OAAG,oBAAO,kBAAkB,CAAC,SAAS,CAAC,EACvC;AACC,UAAM,GAAG,oBAAO,kBAAkB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;IACjF;;AAED,UAAO,MAAM,CAAC;GACd;;;QAlCI,SAAS;;;AA2CR,SAAS,KAAK,CAAC,OAAO,EAC7B;AACC,KAAI,MAAM,GAAG,MAAM,CAAC,IAAI,qBAAQ,CAC7B,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,sBAAS,CAAC,CACxD,MAAM,CAAC,UAAC,IAAW;MAAV,SAAS,GAAV,IAAW,CAAV,SAAS;SAAM,OAAO,SAAS,KAAK,WAAW;EAAA,CAAC,CACzD,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEjD,KAAG,MAAM,CAAC,MAAM,KAAK,CAAC,EACtB;AACC,SAAO,CAAC,GAAG,yBAAuB,OAAO,CAAG,CAAC;EAC7C;;AAED,QAAO,MAAM,CAAC,CAAC,CAAC,CAAC;CACjB;;qBAEc,SAAS","file":"Tokenizer.js","sourcesContent":["import Regexs from './Regexs';\r\nimport RegexNames from './RegexNames';\r\nimport Parsers from './Parsers';\r\n\r\nclass Tokenizer {\r\n\r\n\t/**\r\n\t * Check if regex match\r\n\t * @param element\r\n\t * @param regexs\r\n\t * @param regexName\r\n\t * @returns {*}\r\n\t */\r\n\tstatic discoverRegex(element, regexs, regexName)\r\n\t{\r\n\t\tif(element.match(regexs[regexName].regex))\r\n\t\t{\r\n\t\t\treturn {regexName, element};\r\n\t\t}\r\n\r\n\t\treturn {element};\r\n\t}\r\n\r\n\t/**\r\n\t * Apply correct regex\r\n\t * @param regexElementCouple\r\n\t * @returns {*}\r\n\t */\r\n\tstatic parseElementByRegex(regexElementCouple)\r\n\t{\r\n\t\tlet result = regexElementCouple.element;\r\n\r\n\t\tif(Regexs[regexElementCouple.regexName])\r\n\t\t{\r\n\t\t\tresult = Regexs[regexElementCouple.regexName].parser(regexElementCouple.element);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Check which rule to apply for the current element\r\n * @param element\r\n * @returns {*}\r\n */\r\nexport function parse(element)\r\n{\r\n\tlet parsed = Object.keys(Regexs).\r\n\t\t\t\tmap(Tokenizer.discoverRegex.bind(this, element, Regexs)).\r\n\t\t\t\tfilter(({regexName}) => typeof regexName !== 'undefined').\r\n\t\t\t\tmap(Tokenizer.parseElementByRegex.bind(this));\r\n\r\n\tif(parsed.length === 0)\r\n\t{\r\n\t\tconsole.log(`No regex found for ${element}`);\r\n\t}\r\n\r\n\treturn parsed[0];\r\n}\r\n\r\nexport default Tokenizer;"]}