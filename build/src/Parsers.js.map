{"version":3,"sources":["../../develop/src/Parsers.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;IAMP,OAAO;AAED,UAFN,OAAO,GAGZ;wBAHK,OAAO;EAKX;;;;;;;;cALI,OAAO;;SAYE,iBAAC,GAAG,EAClB;AACC,MAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAElD,UAAO,GAAG,CAAC;GACX;;;;;;;;;;;;SAUY,gBAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EACtC;AACC,OAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC;AACnB,IAAC,GAAG,MAAM,CAAC;AACX,QAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAE7B,UAAM,KAAK,CAAC,MAAM,EAClB;AACC,QAAI,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;AACrB,QAAG,CAAC,KAAK,CAAC,MAAM,EAChB;AACC,MAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;KACpB,MAED;AACC,MAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;KAC5B;IACD;AACD,UAAO,MAAM,CAAC;GACd;;;;;;;;;SAOc,kBAAC,GAAG,EACnB;AACC,UAAO,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,UAAS,KAAK,EAAE,MAAM,EAClD;AACC,WAAO,MAAM,CAAC,WAAW,EAAE,CAAC;IAC5B,CAAC,CAAC;GACH;;;;;;;;;SAOiB,qBAAC,GAAG,EACtB;AACC,UAAO,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;GAC/B;;;;;;;;;;;SASiB,qBAAC,GAAG,EACtB;AACC,OAAI,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AACxC,OAAG,OAAO,IAAI,KAAK,WAAW,EAC9B;AACC,QAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACvB,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,WAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB;;AAED,UAAO,GAAG,CAAC;GACX;;;;;;;;;SAOe,mBAAC,GAAG,EACpB;AACC,UAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;GACjC;;;;;;;;;SAOmB,uBAAC,GAAG,EACxB;AACC,UAAO,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;GACtC;;;QA7GI,OAAO;;;qBAgHE,OAAO","file":"Parsers.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Collection of different parsers used in\r\n * spreadsheet.\r\n */\r\nclass Parsers\r\n{\r\n\tconstructor()\r\n\t{\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Convert string to a array\r\n\t * @param str\r\n\t * @returns {Array|*}\r\n\t */\r\n\tstatic toArray(str)\r\n\t{\r\n\t\tstr = str.substring(1, str.length - 1).split(',');\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Parse 'x.y.z = 10' to a object as\r\n\t * {x: {y: {z: 10}}}\r\n\t * @param namespace\r\n\t * @param value\r\n\t * @param parsed\r\n\t * @returns {*}\r\n\t */\r\n\tstatic deepen(namespace, value, parsed)\r\n\t{\r\n\t\tvar t, parts, part;\r\n\t\tt = parsed;\r\n\t\tparts = namespace.split('.');\r\n\r\n\t\twhile(parts.length)\r\n\t\t{\r\n\t\t\tpart = parts.shift();\r\n\t\t\tif(!parts.length)\r\n\t\t\t{\r\n\t\t\t\tt = t[part] = value;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tt = t[part] = t[part] || {};\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn parsed;\r\n\t}\r\n\r\n\t/**\r\n\t * Camelize dash separated string\r\n\t * @param str\r\n\t * @returns {string|XML|void|*}\r\n\t */\r\n\tstatic camelize(str)\r\n\t{\r\n\t\treturn str.replace(/-(.)/g, function(match, group1)\r\n\t\t{\r\n\t\t\treturn group1.toUpperCase();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Remove blank spaces\r\n\t * @param str\r\n\t * @returns {string|XML|void|*}\r\n\t */\r\n\tstatic cleanSpaces(str)\r\n\t{\r\n\t\treturn str.replace(/\\s+/g, '');\r\n\t}\r\n\r\n\t/**\r\n\t * Remove locale key from string.\r\n\t * Rebuild the string back without -locale- and\r\n\t * locale value itself\r\n\t * @param str\r\n\t * @returns {*}\r\n\t */\r\n\tstatic cleanLocale(str)\r\n\t{\r\n\t\tlet _str = str.replace('-locale-', '-');\r\n\t\tif(typeof _str !== 'undefined')\r\n\t\t{\r\n\t\t\t_str = _str.split('-');\r\n\t\t\t_str.pop();\r\n\t\t\treturn _str.join('-');\r\n\t\t}\r\n\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove __dict key\r\n\t * @param str\r\n\t * @returns {string|XML|void|*}\r\n\t */\r\n\tstatic cleanDict(str)\r\n\t{\r\n\t\treturn str.replace('__dict', '');\r\n\t}\r\n\r\n\t/**\r\n\t * Remove __obj_parse key\r\n\t * @param str\r\n\t * @returns {string|XML|void|*}\r\n\t */\r\n\tstatic cleanObjParse(str)\r\n\t{\r\n\t\treturn str.replace('__obj_parse', '');\r\n\t}\r\n}\r\n\r\nexport default Parsers;"]}