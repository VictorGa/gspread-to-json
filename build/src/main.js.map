{"version":3,"sources":["../../develop/src/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["'use strict';\r\n\r\nimport {default as SpreadsheetController, fecthSpreadsheet, loadSpreadsheets}  from './SpreadsheetController';\r\nimport {parseRelations,applyRelations} from './RelationParser';\r\nimport {parseTab, parseRow, convertRowToDict} from './TabUtils';\r\nimport {write, writeAll} from './FileWriter';\r\nimport Parsers from './Parsers';\r\n\r\nconst Promise = require('native-or-bluebird');\r\nconst relationKey = '__relation__';\r\n\r\nexport function filterTabNames(tabName)\r\n{\r\n\treturn tabName !== relationKey;\r\n}\r\n\r\nexport function execute(spreadsheets, callback = ()=>{})\r\n{\r\n\r\n\tGLOBAL.isNode = false;\r\n\r\n\tconsole.log(GLOBAL.isNode);\r\n\r\n\t//Fetch spreadsheets\r\n\tlet spreadsheetsLoaded = Promise.all(loadSpreadsheets(spreadsheets));\r\n\r\n\tspreadsheetsLoaded.then(results =>\r\n\t{\r\n\t\tlet fileUrls = {};\r\n\t\t//Build Id links\r\n\t\tresults.forEach(data =>\r\n\t\t{\r\n\r\n\t\t\t//Get relations if exists\r\n\t\t\tlet relations;\r\n\t\t\tlet {title} = data;\r\n\t\t\tlet spreadsheet = data.results;\r\n\t\t\tlet tabKeys = Object.keys(spreadsheet);\r\n\r\n\t\t\tconsole.log('>> results', tabKeys)\r\n\r\n\t\t\t//Check if there is a relation tab\r\n\t\t\tif(tabKeys.indexOf(relationKey) !== -1)\r\n\t\t\t{\r\n\t\t\t\trelations = parseRelations(spreadsheet[relationKey].rows);\r\n\r\n\t\t\t\t//Remove it from keys\r\n\t\t\t\tlet idx = tabKeys.indexOf(relationKey);\r\n\t\t\t\ttabKeys.splice(idx, 1);\r\n\t\t\t}\r\n\r\n\t\t\t//Parse tabs regular tabs\r\n\t\t\tlet parsedTabs = tabKeys.map(parseTab.bind(this, spreadsheet));\r\n\r\n\t\t\t//Merge tabs\r\n\t\t\tparsedTabs = Object.assign(...parsedTabs);\r\n\r\n\t\t\t//Once we have all well parsed, let's check relations\r\n\t\t\tif(typeof relations !== 'undefined')\r\n\t\t\t{\r\n\t\t\t\tapplyRelations(relations, parsedTabs);\r\n\t\t\t}\r\n\r\n\t\t\t//Sort by files and locales\r\n\t\t\tlet files = {};\r\n\t\t\tObject.keys(parsedTabs)\r\n\t\t\t\t  .filter(filterTabNames)\r\n\t\t\t\t  .forEach(tabName =>\r\n\t\t\t\t  {\r\n\t\t\t\t\t  let {rows, localizedRows} = parsedTabs[tabName];\r\n\t\t\t\t\t  let locales = Object.keys(localizedRows);\r\n\r\n\t\t\t\t\t  if(locales.length)\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t\t  locales.forEach(locale =>\r\n\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t  //Create locale\r\n\t\t\t\t\t\t\t  if(typeof files[locale] === 'undefined')\r\n\t\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t\t  files[locale] = {};\r\n\t\t\t\t\t\t\t  }\r\n\r\n\t\t\t\t\t\t\t  rows = rows.map((row, index) =>\r\n\t\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t\t  let localized = localizedRows[locale][index];\r\n\t\t\t\t\t\t\t\t  return Object.assign(row, localized);\r\n\t\t\t\t\t\t\t  });\r\n\r\n\t\t\t\t\t\t\t  parsedTabs[tabName].rows = rows;\r\n\t\t\t\t\t\t\t  files[locale][tabName] = parsedTabs[tabName].rows;\r\n\t\t\t\t\t\t  });\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  else\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t\t  if(typeof files[data.title] === 'undefined')\r\n\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t  files[data.title] = {};\r\n\t\t\t\t\t\t  }\r\n\r\n\t\t\t\t\t\t  let tab = tabName;\r\n\t\t\t\t\t\t  if(parsedTabs[tabName].isDict)\r\n\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t  let dict = {};\r\n\t\t\t\t\t\t\t  rows.forEach(convertRowToDict.bind(this, dict));\r\n\t\t\t\t\t\t\t  tab = Parsers.cleanDict(tabName);\r\n\t\t\t\t\t\t\t  rows = dict;\r\n\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t  else if(parsedTabs[tabName].isObjParse)\r\n\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t  tab = Parsers.cleanObjParse(tabName);\r\n\t\t\t\t\t\t  }\r\n\r\n\t\t\t\t\t\t  files[data.title][tab] = rows;\r\n\t\t\t\t\t  }\r\n\t\t\t\t  });\r\n\r\n\t\t\t//Save all files\r\n\t\t\tfileUrls[title] = writeAll(files, title);\r\n\t\t});\r\n\r\n\t\tcallback(fileUrls);\r\n\t});\r\n}\r\n\r\n\r\n"]}