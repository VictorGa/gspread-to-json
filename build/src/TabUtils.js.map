{"version":3,"sources":["../../develop/src/TabUtils.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;uBACO,WAAW;;;;yBACX,aAAa;;AAEjC,IAAM,OAAO,GAAG,QAAQ,CAAC;AACzB,IAAM,WAAW,GAAG,aAAa,CAAC;;;;;;;;AAO3B,SAAS,QAAQ,CAAE,GAAG,EAAE;AAC9B,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,OAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AAC/B,QAAM,CAAC,GAAG,CAAC,GAAG,sBAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;;AAEH,QAAO,MAAM,CAAC;CACd;;;;;;;;;AAQM,SAAS,gBAAgB,CAAE,MAAM,EAAE,GAAG,EAAE;AAC9C,KAAI,OAAO,GAAG,CAAC,EAAE,KAAK,WAAW,EAAE;AAClC,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;AACnC,SAAO,KAAK,CAAC,EAAE,CAAC;;AAEhB,QAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;EACvB;CACD;;;;;;;;;;AASM,SAAS,QAAQ,CAAE,WAAW,EAAE,GAAG,EAAE;AAC3C,KAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AACzC,KAAI,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AACjD,KAAI,IAAI,YAAA,CAAC;AACT,KAAI,aAAa,GAAG,EAAE,CAAC;;;;AAIvB,KAAI,UAAU,EAAE;AACf,MAAI,GAAG,EAAE,CAAC;AACV,aAAW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;UAAI,qBAAQ,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC;GAAA,CAAC,CAAC;EAC9E,MACI;AACJ,QAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CACjC,OAAO,CAAC,UAAA,MAAM,EAAI;AAClB,OAAI,OAAO,aAAa,CAAC,MAAM,CAAC,KAAK,WAAW,EAAE;AACjD,iBAAa,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;IAC3B;;AAED,OAAI,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC9C,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,YAAY,EAAI;AAC3C,UAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK,EAAI;AACrC,kBAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,qBAAG,YAAY,EAAG,KAAK,EAAE,CAAC,CAAC;KAC9D,CAAC,CAAA;IACF,CAAC,CAAC;GACH,CAAC,CAAC;;AAEN,MAAI,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG;UAAI,QAAQ,CAAC,GAAG,CAAC;GAAA,CAAC,CAAC;EACvD;;AAED,4BACE,GAAG,EAAG;AACN,MAAI,EAAJ,IAAI;AACJ,QAAM,EAAN,MAAM;AACN,YAAU,EAAV,UAAU;AACV,eAAa,EAAb,aAAa;AACb,aAAW,EAAE,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,KAAK,WAAW;EAC5D,EACA;CACF","file":"TabUtils.js","sourcesContent":["'use strict';\r\nimport Parsers from './Parsers';\r\nimport {parse} from './Tokenizer';\r\n\r\nconst dictKey = '__dict';\r\nconst objParseKey = '__obj_parse';\r\n\r\n/**\r\n * For each row parse content applying rules\r\n * @param row\r\n * @returns {{}}\r\n */\r\nexport function parseRow (row) {\r\n\tlet parsed = {};\r\n\tObject.keys(row).forEach(key => {\r\n\t\tparsed[key] = parse(row[key]);\r\n\t});\r\n\r\n\treturn parsed;\r\n}\r\n\r\n/**\r\n * Set the whole row as dictionary\r\n * [id] : data\r\n * @param parent\r\n * @param row\r\n */\r\nexport function convertRowToDict (parent, row) {\r\n\tif (typeof row.id !== 'undefined') {\r\n\t\tlet clone = Object.assign({}, row);\r\n\t\tdelete clone.id;\r\n\r\n\t\tparent[row.id] = clone;\r\n\t}\r\n}\r\n\r\n/**\r\n * Parse spreadsheet tab.\r\n * Loop each tab's row and apply regexs\r\n * @param spreadsheet\r\n * @param tab\r\n * @returns {{}}\r\n */\r\nexport function parseTab (spreadsheet, tab) {\r\n\tlet isDict = tab.indexOf(dictKey) !== -1;\r\n\tlet isObjParse = tab.indexOf(objParseKey) !== -1;\r\n\tlet rows;\r\n\tlet localizedRows = {};\r\n\r\n\t//In case is a object should be deepened\r\n\t//Just couples of id-copy\r\n\tif (isObjParse) {\r\n\t\trows = {};\r\n\t\tspreadsheet[tab].rows.forEach(row => Parsers.deepen(row.id, row.value, rows));\r\n\t}\r\n\telse {\r\n\t\tObject.keys(spreadsheet[tab].locales)\r\n\t\t\t  .forEach(locale => {\r\n\t\t\t\t  if (typeof localizedRows[locale] === 'undefined') {\r\n\t\t\t\t\t  localizedRows[locale] = [];\r\n\t\t\t\t  }\r\n\r\n\t\t\t\t  let values = spreadsheet[tab].locales[locale];\r\n\t\t\t\t  Object.keys(values).forEach(propertyName => {\r\n\t\t\t\t\t  values[propertyName].forEach(value => {\r\n\t\t\t\t\t\t  localizedRows[locale].push(parseRow({[propertyName]: value}));\r\n\t\t\t\t\t  })\r\n\t\t\t\t  });\r\n\t\t\t  });\r\n\r\n\t\trows = spreadsheet[tab].rows.map(row => parseRow(row));\r\n\t}\r\n\r\n\treturn {\r\n\t\t[tab]: {\r\n\t\t\trows,\r\n\t\t\tisDict,\r\n\t\t\tisObjParse,\r\n\t\t\tlocalizedRows,\r\n\t\t\tisLocalized: typeof spreadsheet[tab].locales !== 'undefined'\r\n\t\t}\r\n\t};\r\n}"]}