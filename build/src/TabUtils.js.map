{"version":3,"sources":["../../develop/src/TabUtils.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;uBACO,WAAW;;;;yBACX,aAAa;;AAEjC,IAAM,OAAO,GAAG,QAAQ,CAAC;AACzB,IAAM,WAAW,GAAG,aAAa,CAAC;;;;;;;;AAO3B,SAAS,QAAQ,CAAE,GAAG,EAAE;AAC9B,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,OAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AAC/B,QAAM,CAAC,GAAG,CAAC,GAAG,sBAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;;AAEH,QAAO,MAAM,CAAC;CACd;;;;;;;;;AAQM,SAAS,gBAAgB,CAAE,MAAM,EAAE,GAAG,EAAE;AAC9C,KAAI,OAAO,GAAG,CAAC,EAAE,KAAK,WAAW,EAAE;AAClC,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;AACnC,SAAO,KAAK,CAAC,EAAE,CAAC;;AAEhB,QAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;EACvB;CACD;;;;;;;;;;AASM,SAAS,QAAQ,CAAE,WAAW,EAAE,GAAG,EAAE;AAC3C,KAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AACzC,KAAI,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AACjD,KAAI,IAAI,YAAA,CAAC;AACT,KAAI,aAAa,GAAG,EAAE,CAAC;;;;AAIvB,KAAI,UAAU,EAAE;AACf,MAAI,GAAG,EAAE,CAAC;AACV,aAAW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;UAAI,qBAAQ,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC;GAAA,CAAC,CAAC;EAC9E,MACI;AACJ,QAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CACjC,OAAO,CAAC,UAAA,MAAM,EAAI;AAClB,OAAI,OAAO,aAAa,CAAC,MAAM,CAAC,KAAK,WAAW,EAAE;AACjD,iBAAa,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;IAC3B;;AAED,OAAI,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC9C,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,YAAY,EAAI;AAC3C,UAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK,EAAI;AACrC,kBAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,qBAAG,YAAY,EAAG,KAAK,EAAE,CAAC,CAAC;KAC9D,CAAC,CAAA;IACF,CAAC,CAAC;GACH,CAAC,CAAC;;AAEN,MAAI,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG;UAAI,QAAQ,CAAC,GAAG,CAAC;GAAA,CAAC,CAAC;EACvD;;AAED,4BACE,GAAG,EAAG;AACN,MAAI,EAAJ,IAAI;AACJ,QAAM,EAAN,MAAM;AACN,YAAU,EAAV,UAAU;AACV,eAAa,EAAb,aAAa;AACb,aAAW,EAAE,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,KAAK,WAAW;EAC5D,EACA;CACF","file":"TabUtils.js","sourcesContent":["'use strict';\nimport Parsers from './Parsers';\nimport {parse} from './Tokenizer';\n\nconst dictKey = '__dict';\nconst objParseKey = '__obj_parse';\n\n/**\n * For each row parse content applying rules\n * @param row\n * @returns {{}}\n */\nexport function parseRow (row) {\n\tlet parsed = {};\n\tObject.keys(row).forEach(key => {\n\t\tparsed[key] = parse(row[key]);\n\t});\n\n\treturn parsed;\n}\n\n/**\n * Set the whole row as dictionary\n * [id] : data\n * @param parent\n * @param row\n */\nexport function convertRowToDict (parent, row) {\n\tif (typeof row.id !== 'undefined') {\n\t\tlet clone = Object.assign({}, row);\n\t\tdelete clone.id;\n\n\t\tparent[row.id] = clone;\n\t}\n}\n\n/**\n * Parse spreadsheet tab.\n * Loop each tab's row and apply regexs\n * @param spreadsheet\n * @param tab\n * @returns {{}}\n */\nexport function parseTab (spreadsheet, tab) {\n\tlet isDict = tab.indexOf(dictKey) !== -1;\n\tlet isObjParse = tab.indexOf(objParseKey) !== -1;\n\tlet rows;\n\tlet localizedRows = {};\n\n\t//In case is a object should be deepened\n\t//Just couples of id-copy\n\tif (isObjParse) {\n\t\trows = {};\n\t\tspreadsheet[tab].rows.forEach(row => Parsers.deepen(row.id, row.value, rows));\n\t}\n\telse {\n\t\tObject.keys(spreadsheet[tab].locales)\n\t\t\t  .forEach(locale => {\n\t\t\t\t  if (typeof localizedRows[locale] === 'undefined') {\n\t\t\t\t\t  localizedRows[locale] = [];\n\t\t\t\t  }\n\n\t\t\t\t  let values = spreadsheet[tab].locales[locale];\n\t\t\t\t  Object.keys(values).forEach(propertyName => {\n\t\t\t\t\t  values[propertyName].forEach(value => {\n\t\t\t\t\t\t  localizedRows[locale].push(parseRow({[propertyName]: value}));\n\t\t\t\t\t  })\n\t\t\t\t  });\n\t\t\t  });\n\n\t\trows = spreadsheet[tab].rows.map(row => parseRow(row));\n\t}\n\n\treturn {\n\t\t[tab]: {\n\t\t\trows,\n\t\t\tisDict,\n\t\t\tisObjParse,\n\t\t\tlocalizedRows,\n\t\t\tisLocalized: typeof spreadsheet[tab].locales !== 'undefined'\n\t\t}\n\t};\n}"]}