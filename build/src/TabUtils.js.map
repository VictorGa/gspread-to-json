{"version":3,"sources":["../../develop/src/TabUtils.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;uBACO,WAAW;;;;yBACX,aAAa;;AAEjC,IAAM,OAAO,GAAG,QAAQ,CAAC;AACzB,IAAM,WAAW,GAAG,aAAa,CAAC;;;;;;;;AAO3B,SAAS,QAAQ,CAAC,GAAG,EAC5B;AACC,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,OAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAC5B;AACC,QAAM,CAAC,GAAG,CAAC,GAAG,sBAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;;AAEH,QAAO,MAAM,CAAC;CACd;;;;;;;;;AAQM,SAAS,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAC5C;AACC,KAAG,OAAO,GAAG,CAAC,EAAE,KAAK,WAAW,EAChC;AACC,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;AACnC,SAAO,KAAK,CAAC,EAAE,CAAC;;AAEhB,SAAO,CAAC,GAAG,CAAC,MAAM,EAAC,MAAM,CAAC,CAAC;AAC3B,QAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;EACvB;CACD;;;;;;;;;;AASM,SAAS,QAAQ,CAAC,WAAW,EAAE,GAAG,EACzC;AACC,KAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AACzC,KAAI,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AACjD,KAAI,IAAI,YAAA,CAAC;AACT,KAAI,aAAa,GAAG,EAAE,CAAC;;;;AAIvB,KAAG,UAAU,EACb;AACC,MAAI,GAAG,EAAE,CAAC;AACV,aAAW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;UAAI,qBAAQ,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC;GAAA,CAAC,CAAC;EAC9E,MAED;AACC,QAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM,EAAG;AACtD,OAAG,OAAO,aAAa,CAAC,MAAM,CAAC,KAAK,WAAW,EAC/C;AACC,iBAAa,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;IAC3B;;AAED,OAAI,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC9C,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,YAAY,EACxC;AACC,UAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK,EAAG;AACpC,kBAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,qBAAG,YAAY,EAAG,KAAK,EAAE,CAAC,CAAC;KAC9D,CAAC,CAAA;IACF,CAAC,CAAC;GACH,CAAC,CAAC;;AAEH,MAAI,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG;UAAI,QAAQ,CAAC,GAAG,CAAC;GAAA,CAAC,CAAC;EACvD;;AAED,4BAAS,GAAG,EAAG,EAAC,IAAI,EAAJ,IAAI,EAAE,MAAM,EAAN,MAAM,EAAE,UAAU,EAAV,UAAU,EAAE,aAAa,EAAb,aAAa,EAAE,WAAW,EAAE,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,KAAK,WAAW,EAAC,EAAE;CACxH","file":"TabUtils.js","sourcesContent":["'use strict';\r\nimport Parsers from './Parsers';\r\nimport {parse} from './Tokenizer';\r\n\r\nconst dictKey = '__dict';\r\nconst objParseKey = '__obj_parse';\r\n\r\n/**\r\n * For each row parse content applying rules\r\n * @param row\r\n * @returns {{}}\r\n */\r\nexport function parseRow(row)\r\n{\r\n\tlet parsed = {};\r\n\tObject.keys(row).forEach(key =>\r\n\t{\r\n\t\tparsed[key] = parse(row[key]);\r\n\t});\r\n\r\n\treturn parsed;\r\n}\r\n\r\n/**\r\n * Set the whole row as dictionary\r\n * [id] : data\r\n * @param parent\r\n * @param row\r\n */\r\nexport function convertRowToDict(parent, row)\r\n{\r\n\tif(typeof row.id !== 'undefined')\r\n\t{\r\n\t\tlet clone = Object.assign({}, row);\r\n\t\tdelete clone.id;\r\n\r\n\t\tconsole.log('>>> ',parent);\r\n\t\tparent[row.id] = clone;\r\n\t}\r\n}\r\n\r\n/**\r\n * Parse spreadsheet tab.\r\n * Loop each tab's row and apply regexs\r\n * @param spreadsheet\r\n * @param tab\r\n * @returns {{}}\r\n */\r\nexport function parseTab(spreadsheet, tab)\r\n{\r\n\tlet isDict = tab.indexOf(dictKey) !== -1;\r\n\tlet isObjParse = tab.indexOf(objParseKey) !== -1;\r\n\tlet rows;\r\n\tlet localizedRows = {};\r\n\r\n\t//In case is a object should be deepened\r\n\t//Just couples of id-copy\r\n\tif(isObjParse)\r\n\t{\r\n\t\trows = {};\r\n\t\tspreadsheet[tab].rows.forEach(row => Parsers.deepen(row.id, row.value, rows));\r\n\t}\r\n\telse\r\n\t{\r\n\t\tObject.keys(spreadsheet[tab].locales).forEach(locale =>{\r\n\t\t\tif(typeof localizedRows[locale] === 'undefined')\r\n\t\t\t{\r\n\t\t\t\tlocalizedRows[locale] = [];\r\n\t\t\t}\r\n\r\n\t\t\tlet values = spreadsheet[tab].locales[locale];\r\n\t\t\tObject.keys(values).forEach(propertyName =>\r\n\t\t\t{\r\n\t\t\t\tvalues[propertyName].forEach(value =>{\r\n\t\t\t\t\tlocalizedRows[locale].push(parseRow({[propertyName]: value}));\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\trows = spreadsheet[tab].rows.map(row => parseRow(row));\r\n\t}\r\n\r\n\treturn {[tab]: {rows, isDict, isObjParse, localizedRows, isLocalized: typeof spreadsheet[tab].locales !== 'undefined'}};\r\n}"]}