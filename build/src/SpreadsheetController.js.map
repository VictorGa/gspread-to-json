{"version":3,"sources":["../../develop/src/SpreadsheetController.js"],"names":[],"mappings":"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","file":"SpreadsheetController.js","sourcesContent":["import Parsers from './Parsers';\nvar config = require('../../config');\nvar GoogleSpreadsheet = require(\"google-spreadsheet\");\nvar Promise = require('native-or-bluebird');\n\nclass SpreadsheetController\n{\n    constructor(id, name, onReady)\n    {\n        this._incompatibleTags = ['_links', 'save', 'del', 'content', '_xml'];\n\n        this.sheet = new GoogleSpreadsheet(id);\n        this.sheet.useServiceAccountAuth(config.googleauth, this.init.bind(this, onReady));\n        this.name = name;\n\n    }\n\n    init(onReady) {\n        this.sheet.getInfo((err, sheet_info) => {\n            this.data = sheet_info;\n            onReady();\n        });\n    }\n\n    getAll(clean = true) {\n\n        return new Promise((resolve, reject)=>\n        {\n            let iterables = this.data.worksheets.map((element, index) => {\n                return this.getRow(element, clean);\n            });\n\n            Promise.all(iterables).then(\n                results => {\n                    //results is an array of objects, each object being a worksheet\n                    //now we merge all in one object\n                    let title = typeof this.name === 'undefined' ? this.data.title : this.name;\n                    resolve({title: title, results: Object.assign(...results)});\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    getRow(element, clean) {\n        return new Promise((resolve, reject) => {\n            element.getRows((err, rows)=> {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve({[element.title]: this.filter(rows, clean)});\n                }\n            });\n        })\n    }\n\n    filter(rows, clean)\n    {\n        let filtered = [];\n        let filteredRow = {};\n        let locales = {};\n\n        for (var i = 0; i < rows.length; i++)\n        {\n            filteredRow = {};\n\n            for (var key in rows[i])\n            {\n                if (rows[i].hasOwnProperty(key) && this._incompatibleTags.indexOf(key) === -1)\n                {\n                    let filteredKey;\n                    let locale;\n                    let value =  clean ? Parsers.cleanSpaces(rows[i][key]) : rows[i][key];\n\n                    //Check if property is localized\n                    if(key.indexOf('-locale-') === -1)\n                    {\n                        filteredKey = Parsers.camelize(Parsers.cleanSpaces(key));\n                        filteredRow[filteredKey] = value;\n                    }\n                    else\n                    {\n                        filteredKey = Parsers.camelize(Parsers.cleanLocale(Parsers.cleanSpaces(key)));\n                        locale = this.extractLocale(key);\n                        if(!locales.hasOwnProperty(locale))\n                        {\n                            locales[locale] = {[filteredKey]: []};\n                        }\n\n                        locales[locale][filteredKey].push(value);\n                    }\n\n                    //filteredRow[filteredKey] = clean ? Parsers.cleanSpaces(rows[i][key]) : rows[i][key];\n                }\n            }\n\n            filtered.push(filteredRow);\n        }\n\n        return {rows: filtered, locales};\n    }\n\n    extractLocale(propertyName)\n    {\n        //Check if locale is present property name\n        return propertyName.split('-').pop();\n    }\n\n    getCellsByWorksheetId(worksheetId, onReady) {\n        for (var i = 0; i < this.data.worksheets.length; i++) {\n            if (this.data.worksheets[i].title === worksheetId) {\n                this.data.worksheets[i].getCells(this.data.worksheets[i].id, function (off, data) {\n                    onReady(data);\n                });\n                return;\n            }\n        }\n    }\n}\n\n/**\n * Fetch spreadsheet\n * @param spId\n * @param cleanSpaces\n * @returns {exports|module.exports}\n */\nexport function fecthSpreadsheet(spId, name, cleanSpaces = true) {\n\n    console.log(`Fetching data from ${spId}`.bgBlue.white);\n    return new Promise((resolve, reject) => {\n        let spreadsheet = new SpreadsheetController(spId, name, ()=> {\n            spreadsheet.getAll(cleanSpaces).then(data => resolve(data), error => reject(error));\n        });\n    });\n};\n\n/**\n * Create a list of promises for spreadsheets\n * @param list\n * @returns {Array}\n */\nexport function loadSpreadsheets(list) {\n\n    let metadata = [];\n    list.forEach(spreadsheet => {\n      metadata.push(fecthSpreadsheet(spreadsheet.id, spreadsheet.name, JSON.parse(spreadsheet.cleanSpaces)));\n    });\n\n    return metadata;\n};\n\nexport default SpreadsheetController;\n\n"]}