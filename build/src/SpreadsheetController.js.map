{"version":3,"sources":["../../develop/src/SpreadsheetController.js"],"names":[],"mappings":"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","file":"SpreadsheetController.js","sourcesContent":["import Parsers from './Parsers';\r\nvar config = require('../../gspreadfile');\r\nvar GoogleSpreadsheet = require(\"google-spreadsheet\");\r\nvar Promise = require('native-or-bluebird');\r\n\r\n/**\r\n * Controller fetching spreadsheet data\r\n * Parsing data keeping non needed key words out\r\n */\r\nclass SpreadsheetController {\r\n\tconstructor(id, name, onReady)\r\n\t{\r\n\t\tthis._incompatibleTags = ['_links', 'save', 'del', 'content', '_xml'];\r\n\r\n\t\tthis.sheet = new GoogleSpreadsheet(id);\r\n\t\tthis.sheet.useServiceAccountAuth(config.googleauth, this.init.bind(this, onReady));\r\n\t\tthis.name = name;\r\n\r\n\t}\r\n\r\n\tinit(onReady)\r\n\t{\r\n\t\tthis.sheet.getInfo((err, sheet_info) =>\r\n\t\t{\r\n\t\t\tthis.data = sheet_info;\r\n\t\t\tonReady();\r\n\t\t});\r\n\t}\r\n\r\n\tgetAll(clean = true)\r\n\t{\r\n\r\n\t\treturn new Promise((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet iterables = this.data.worksheets.map((element, index) =>\r\n\t\t\t{\r\n\t\t\t\treturn this.getRow(element, clean);\r\n\t\t\t});\r\n\r\n\t\t\tPromise.all(iterables).then(\r\n\t\t\t\tresults =>\r\n\t\t\t\t{\r\n\t\t\t\t\t//results is an array of objects, each object being a worksheet\r\n\t\t\t\t\t//now we merge all in one object\r\n\t\t\t\t\tlet title = typeof this.name === 'undefined' ? this.data.title : this.name;\r\n\t\t\t\t\tresolve({title: title, results: Object.assign(...results)});\r\n\t\t\t\t},\r\n\t\t\t\terror =>\r\n\t\t\t\t{\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetRow(element, clean)\r\n\t{\r\n\t\treturn new Promise((resolve, reject) =>\r\n\t\t{\r\n\t\t\telement.getRows((err, rows)=>\r\n\t\t\t{\r\n\t\t\t\tif(err)\r\n\t\t\t\t{\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tresolve({[element.title]: this.filter(rows, clean)});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t})\r\n\t}\r\n\r\n\tfilter(rows, clean)\r\n\t{\r\n\t\tlet filtered = [];\r\n\t\tlet filteredRow = {};\r\n\t\tlet locales = {};\r\n\r\n\t\tfor(var i = 0; i < rows.length; i++)\r\n\t\t{\r\n\t\t\tfilteredRow = {};\r\n\r\n\t\t\tfor(var key in rows[i])\r\n\t\t\t{\r\n\t\t\t\tif(rows[i].hasOwnProperty(key) && this._incompatibleTags.indexOf(key) === -1)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet filteredKey;\r\n\t\t\t\t\tlet locale;\r\n\t\t\t\t\tlet value = clean ? Parsers.cleanSpaces(rows[i][key]) : rows[i][key];\r\n\r\n\t\t\t\t\t//Check if property is localized\r\n\t\t\t\t\tif(key.indexOf('-locale-') === -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfilteredKey = Parsers.camelize(Parsers.cleanSpaces(key));\r\n\t\t\t\t\t\tfilteredRow[filteredKey] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfilteredKey = Parsers.camelize(Parsers.cleanLocale(Parsers.cleanSpaces(key)));\r\n\t\t\t\t\t\tlocale = this.extractLocale(key);\r\n\t\t\t\t\t\tif(!locales.hasOwnProperty(locale))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlocales[locale] = {[filteredKey]: []};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlocales[locale][filteredKey].push(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfiltered.push(filteredRow);\r\n\t\t}\r\n\r\n\t\treturn {rows: filtered, locales};\r\n\t}\r\n\r\n\textractLocale(propertyName)\r\n\t{\r\n\t\t//Check if locale is present property name\r\n\t\treturn propertyName.split('-').pop();\r\n\t}\r\n\r\n\tgetCellsByWorksheetId(worksheetId, onReady)\r\n\t{\r\n\t\tfor(var i = 0; i < this.data.worksheets.length; i++)\r\n\t\t{\r\n\t\t\tif(this.data.worksheets[i].title === worksheetId)\r\n\t\t\t{\r\n\t\t\t\tthis.data.worksheets[i].getCells(this.data.worksheets[i].id, function(off, data)\r\n\t\t\t\t{\r\n\t\t\t\t\tonReady(data);\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Fetch spreadsheet\r\n * @param spId\r\n * @param cleanSpaces\r\n * @returns {exports|module.exports}\r\n */\r\nexport function fecthSpreadsheet(spId, name, cleanSpaces = true)\r\n{\r\n\r\n\tconsole.log(`Fetching data from ${spId}`.bgBlue.white);\r\n\treturn new Promise((resolve, reject) =>\r\n\t{\r\n\t\tlet spreadsheet = new SpreadsheetController(spId, name, ()=>\r\n\t\t{\r\n\t\t\tspreadsheet.getAll(cleanSpaces).then(data => resolve(data), error => reject(error));\r\n\t\t});\r\n\t});\r\n};\r\n\r\n/**\r\n * Create a list of promises for spreadsheets\r\n * @param list\r\n * @returns {Array}\r\n */\r\nexport function loadSpreadsheets(list)\r\n{\r\n\r\n\tlet metadata = [];\r\n\tlist.forEach(spreadsheet =>\r\n\t{\r\n\t\tmetadata.push(fecthSpreadsheet(spreadsheet.id, spreadsheet.name, JSON.parse(spreadsheet.cleanSpaces)));\r\n\t});\r\n\r\n\treturn metadata;\r\n};\r\n\r\nexport default SpreadsheetController;\r\n\r\n"]}