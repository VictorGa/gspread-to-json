{"version":3,"sources":["../../develop/src/SpreadsheetController.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;uBAAoB,WAAW;;;;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC1C,IAAI,iBAAiB,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACtD,IAAI,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;;;;;;IAMtC,qBAAqB;AACd,UADP,qBAAqB,CACb,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;wBAD3B,qBAAqB;;AAEzB,MAAI,CAAC,iBAAiB,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;;AAEtE,MAAI,CAAC,KAAK,GAAG,IAAI,iBAAiB,CAAC,EAAE,CAAC,CAAC;AACvC,MAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;AACnF,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;EACjB;;;;;;;;;cAPI,qBAAqB;;SASrB,cAAC,OAAO,EAAE;;;AACd,OAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,UAAU,EAAK;AACvC,UAAK,IAAI,GAAG,UAAU,CAAC;AACvB,WAAO,EAAE,CAAC;IACV,CAAC,CAAC;GACH;;;SAEM,kBAAe;;;OAAd,KAAK,yDAAG,IAAI;;AAEnB,UAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAI;AACtC,QAAI,SAAS,GAAG,OAAK,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,OAAO,EAAE,KAAK,EAAK;AAC5D,YAAO,OAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KACnC,CAAC,CAAC;;AAEH,WAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAC1B,UAAA,OAAO,EAAI;;;AAGV,SAAI,KAAK,GAAG,OAAO,OAAK,IAAI,KAAK,WAAW,GAAG,OAAK,IAAI,CAAC,KAAK,GAAG,OAAK,IAAI,CAAC;AAC3E,YAAO,CAAC,EAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,MAAM,MAAA,CAAb,MAAM,qBAAW,OAAO,EAAC,EAAC,CAAC,CAAC;KAC5D,EACD,UAAA,KAAK,EAAI;AACR,WAAM,CAAC,KAAK,CAAC,CAAC;KACd,CAAC,CAAC;IACJ,CAAC,CAAC;GACH;;;SAEM,gBAAC,OAAO,EAAE,KAAK,EAAE;;;AACvB,UAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,WAAO,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,IAAI,EAAI;AAC7B,SAAI,GAAG,EAAE;AACR,YAAM,CAAC,GAAG,CAAC,CAAC;MACZ,MACI;AACJ,aAAO,qBAAG,OAAO,CAAC,KAAK,EAAG,OAAK,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC;MACrD;KACD,CAAC,CAAC;IACH,CAAC,CAAA;GACF;;;SAEM,gBAAC,IAAI,EAAE,KAAK,EAAE;AACpB,OAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,OAAI,WAAW,GAAG,EAAE,CAAC;AACrB,OAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,QAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,eAAW,GAAG,EAAE,CAAC;;AAEjB,SAAK,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;AACxB,SAAI,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAC9E,UAAI,WAAW,YAAA,CAAC;AAChB,UAAI,MAAM,YAAA,CAAC;AACX,UAAI,KAAK,GAAG,KAAK,GAAG,qBAAQ,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;;AAGrE,UAAI,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE;AACnC,kBAAW,GAAG,qBAAQ,QAAQ,CAAC,qBAAQ,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;AACzD,kBAAW,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;OACjC,MACI;AACJ,kBAAW,GAAG,qBAAQ,QAAQ,CAAC,qBAAQ,WAAW,CAAC,qBAAQ,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9E,aAAM,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AACjC,WAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;AACpC,eAAO,CAAC,MAAM,CAAC,uBAAK,WAAW,EAAG,EAAE,CAAC,CAAC;QACtC;;AAED,cAAO,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;OACzC;MACD;KACD;;AAED,YAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B;;AAED,UAAO,EAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAP,OAAO,EAAC,CAAC;GACjC;;;SAEa,uBAAC,YAAY,EAAE;;AAE5B,UAAO,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;GACrC;;;SAEqB,+BAAC,WAAW,EAAE,OAAO,EAAE;AAC5C,QAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrD,QAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,WAAW,EAAE;AAClD,SAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,UAAU,GAAG,EAAE,IAAI,EAAE;AACjF,aAAO,CAAC,IAAI,CAAC,CAAC;MACd,CAAC,CAAC;AACH,YAAO;KACP;IACD;GACD;;;QApGI,qBAAqB;;;AA6GpB,SAAS,gBAAgB,CAAE,IAAI,EAAE,IAAI,EAAsB;KAApB,WAAW,yDAAG,IAAI;;;AAG/D,QAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,MAAI,WAAW,GAAG,IAAI,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,YAAK;AAC5D,cAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;WAAI,OAAO,CAAC,IAAI,CAAC;IAAA,EAAE,UAAA,KAAK;WAAI,MAAM,CAAC,KAAK,CAAC;IAAA,CAAC,CAAC;GACpF,CAAC,CAAC;EACH,CAAC,CAAC;CACH;;AAAA,CAAC;;;;;;;;AAOK,SAAS,gBAAgB,CAAE,IAAI,EAAE;;AAEvC,KAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,KAAI,CAAC,OAAO,CAAC,UAAA,WAAW,EAAI;AAC3B,UAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;EACvG,CAAC,CAAC;;AAEH,QAAO,QAAQ,CAAC;CAChB;;AAAA,CAAC;;qBAEa,qBAAqB","file":"SpreadsheetController.js","sourcesContent":["import Parsers from './Parsers';\nvar config = require('../../gspreadfile');\nvar GoogleSpreadsheet = require(\"google-spreadsheet\");\nvar Promise = require('native-or-bluebird');\n\n/**\n * Controller fetching spreadsheet data\n * Parsing data keeping non needed key words out\n */\nclass SpreadsheetController {\n\tconstructor (id, name, onReady) {\n\t\tthis._incompatibleTags = ['_links', 'save', 'del', 'content', '_xml'];\n\n\t\tthis.sheet = new GoogleSpreadsheet(id);\n\t\tthis.sheet.useServiceAccountAuth(config.googleauth, this.init.bind(this, onReady));\n\t\tthis.name = name;\n\t}\n\n\tinit (onReady) {\n\t\tthis.sheet.getInfo((err, sheet_info) => {\n\t\t\tthis.data = sheet_info;\n\t\t\tonReady();\n\t\t});\n\t}\n\n\tgetAll (clean = true) {\n\n\t\treturn new Promise((resolve, reject)=> {\n\t\t\tlet iterables = this.data.worksheets.map((element, index) => {\n\t\t\t\treturn this.getRow(element, clean);\n\t\t\t});\n\n\t\t\tPromise.all(iterables).then(\n\t\t\t\tresults => {\n\t\t\t\t\t//results is an array of objects, each object being a worksheet\n\t\t\t\t\t//now we merge all in one object\n\t\t\t\t\tlet title = typeof this.name === 'undefined' ? this.data.title : this.name;\n\t\t\t\t\tresolve({title: title, results: Object.assign(...results)});\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tgetRow (element, clean) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\telement.getRows((err, rows)=> {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresolve({[element.title]: this.filter(rows, clean)});\n\t\t\t\t}\n\t\t\t});\n\t\t})\n\t}\n\n\tfilter (rows, clean) {\n\t\tlet filtered = [];\n\t\tlet filteredRow = {};\n\t\tlet locales = {};\n\n\t\tfor (var i = 0; i < rows.length; i++) {\n\t\t\tfilteredRow = {};\n\n\t\t\tfor (var key in rows[i]) {\n\t\t\t\tif (rows[i].hasOwnProperty(key) && this._incompatibleTags.indexOf(key) === -1) {\n\t\t\t\t\tlet filteredKey;\n\t\t\t\t\tlet locale;\n\t\t\t\t\tlet value = clean ? Parsers.cleanSpaces(rows[i][key]) : rows[i][key];\n\n\t\t\t\t\t//Check if property is localized\n\t\t\t\t\tif (key.indexOf('-locale-') === -1) {\n\t\t\t\t\t\tfilteredKey = Parsers.camelize(Parsers.cleanSpaces(key));\n\t\t\t\t\t\tfilteredRow[filteredKey] = value;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfilteredKey = Parsers.camelize(Parsers.cleanLocale(Parsers.cleanSpaces(key)));\n\t\t\t\t\t\tlocale = this.extractLocale(key);\n\t\t\t\t\t\tif (!locales.hasOwnProperty(locale)) {\n\t\t\t\t\t\t\tlocales[locale] = {[filteredKey]: []};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlocales[locale][filteredKey].push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfiltered.push(filteredRow);\n\t\t}\n\n\t\treturn {rows: filtered, locales};\n\t}\n\n\textractLocale (propertyName) {\n\t\t//Check if locale is present property name\n\t\treturn propertyName.split('-').pop();\n\t}\n\n\tgetCellsByWorksheetId (worksheetId, onReady) {\n\t\tfor (var i = 0; i < this.data.worksheets.length; i++) {\n\t\t\tif (this.data.worksheets[i].title === worksheetId) {\n\t\t\t\tthis.data.worksheets[i].getCells(this.data.worksheets[i].id, function (off, data) {\n\t\t\t\t\tonReady(data);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Fetch spreadsheet\n * @param spId\n * @param cleanSpaces\n * @returns {exports|module.exports}\n */\nexport function fecthSpreadsheet (spId, name, cleanSpaces = true) {\n\n\t//console.log(`Fetching data from ${spId}`.bgBlue.white);\n\treturn new Promise((resolve, reject) => {\n\t\tlet spreadsheet = new SpreadsheetController(spId, name, ()=> {\n\t\t\tspreadsheet.getAll(cleanSpaces).then(data => resolve(data), error => reject(error));\n\t\t});\n\t});\n};\n\n/**\n * Create a list of promises for spreadsheets\n * @param list\n * @returns {Array}\n */\nexport function loadSpreadsheets (list) {\n\n\tlet metadata = [];\n\tlist.forEach(spreadsheet => {\n\t\tmetadata.push(fecthSpreadsheet(spreadsheet.id, spreadsheet.name, JSON.parse(spreadsheet.cleanSpaces)));\n\t});\n\n\treturn metadata;\n};\n\nexport default SpreadsheetController;\n\n"]}