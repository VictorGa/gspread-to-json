{"version":3,"sources":["../develop/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["require(\"babel-core/polyfill\");\r\nvar config = require('../config.json');\r\nvar fs = require('fs');\r\nvar colors = require('colors');\r\nvar Promise = require('native-or-bluebird');\r\n\r\nimport {default as SpreadsheetController, fecthSpreadsheet, loadSpreadsheets}  from './src/SpreadsheetController';\r\nimport {parseRelations,applyRelations} from './src/RelationParser';\r\nimport {parseTab, parseRow, convertRowToDict} from './src/TabUtils';\r\nimport {write, writeAll} from './src/FileWriter';\r\nimport Parsers from './src/Parsers';\r\n\r\nconst relationKey = '__relation__';\r\n\r\nexport function filterTabNames(tabName)\r\n{\r\n\treturn tabName !== relationKey;\r\n}\r\n\r\nexport function processEnv()\r\n{\r\n\t// print process.argv\r\n\tlet spreadsheetNames = [];\r\n\tlet _config = config.spreadsheets;\r\n\tprocess.argv.forEach(function(val, index, array)\r\n\t{\r\n\t\tif(val.indexOf('spreadfile') !== -1)\r\n\t\t{\r\n\t\t\tlet name = val.split(':').pop();\r\n\t\t\tspreadsheetNames.push(name);\r\n\t\t}\r\n\t});\r\n\r\n\t// Get spreadsheet config (id, name)\r\n\treturn spreadsheetNames.map(spreadsheetName => _config.find(({name}) => spreadsheetName === name))\r\n\t\t.filter(spreadsheetConfig => typeof spreadsheetConfig !== 'undefined');\r\n}\r\n\r\n\r\n// Check input\r\nlet spreadsheets = processEnv();\r\nif(!spreadsheets.length)\r\n{\r\n\tspreadsheets = config.spreadsheets;\r\n}\r\n\r\n//Fetch spreadsheets\r\nlet spreadsheetsLoaded = Promise.all(loadSpreadsheets(spreadsheets));\r\n\r\nspreadsheetsLoaded.then(results =>\r\n{\r\n\t//Build Id links\r\n\tresults.forEach(data =>\r\n\t{\r\n\t\t//Get relations if exists\r\n\t\tlet relations;\r\n\t\tlet spreadsheet = data.results;\r\n\t\tlet tabKeys = Object.keys(spreadsheet);\r\n\r\n\t\t//Check if there is a relation tab\r\n\t\tif(tabKeys.includes(relationKey))\r\n\t\t{\r\n\t\t\trelations = parseRelations(spreadsheet[relationKey].rows);\r\n\r\n\t\t\t//Remove it from keys\r\n\t\t\tlet idx = tabKeys.indexOf(relationKey);\r\n\t\t\ttabKeys.splice(idx, 1);\r\n\t\t}\r\n\r\n\t\t//Parse tabs regular tabs\r\n\t\tlet parsedTabs = tabKeys.map(parseTab.bind(this, spreadsheet));\r\n\r\n\t\t//Merge tabs\r\n\t\tparsedTabs = Object.assign(...parsedTabs);\r\n\r\n\t\t//Once we have all well parsed, let's check relations\r\n\t\tif(typeof relations !== 'undefined')\r\n\t\t{\r\n\t\t\tapplyRelations(relations, parsedTabs);\r\n\t\t}\r\n\r\n\t\t//Sort by files and locales\r\n\t\tlet files = {};\r\n\t\tObject.keys(parsedTabs)\r\n\t\t\t.filter(filterTabNames)\r\n\t\t\t.forEach(tabName =>\r\n\t\t\t{\r\n\t\t\t\tlet {rows, localizedRows} = parsedTabs[tabName];\r\n\t\t\t\tlet locales = Object.keys(localizedRows);\r\n\r\n\t\t\t\tif(locales.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tlocales.forEach(locale =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//Create locale\r\n\t\t\t\t\t\tif(typeof files[locale] === 'undefined')\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfiles[locale] = {};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trows = rows.map((row, index) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet localized = localizedRows[locale][index];\r\n\t\t\t\t\t\t\treturn Object.assign(row, localized);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tparsedTabs[tabName].rows = rows;\r\n\t\t\t\t\t\tfiles[locale][tabName] = parsedTabs[tabName].rows;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(typeof files[data.title] === 'undefined')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfiles[data.title] = {};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet tab = tabName;\r\n\t\t\t\t\tif(parsedTabs[tabName].isDict)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet dict = {};\r\n\t\t\t\t\t\trows.forEach(convertRowToDict.bind(this, dict));\r\n\t\t\t\t\t\ttab = Parsers.cleanDict(tabName);\r\n\t\t\t\t\t\trows = dict;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(parsedTabs[tabName].isObjParse)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttab = Parsers.cleanObjParse(tabName);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconsole.log('>>>' , rows);\r\n\t\t\t\t\tfiles[data.title][tab] = rows;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t//Save all files\r\n\t\twriteAll(files);\r\n\t});\r\n\r\n});\r\n"]}