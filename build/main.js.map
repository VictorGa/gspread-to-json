{"version":3,"sources":["../develop/main.js"],"names":[],"mappings":";;;;;;;;;;;;wCAMoF,6BAA6B;;;;iCACrE,sBAAsB;;2BACf,gBAAgB;;6BACrC,kBAAkB;;0BAC5B,eAAe;;;;AAVnC,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACvC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAQ5C,IAAM,WAAW,GAAG,cAAc,CAAC;;AAE5B,SAAS,cAAc,CAAC,OAAO,EAAE;AACpC,WAAO,OAAO,KAAK,WAAW,CAAC;CAClC;;AAEM,SAAS,UAAU,GAAG;;AAEzB,QAAI,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC;AAClC,QAAI,OAAO,GAAG,CAAC,CAAC,CAAC;;AAEjB,WAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE;AAC9C,YAAI,GAAG,KAAK,IAAI,EAAE;AACd,mBAAO,GAAG,KAAK,CAAC;SACnB;KACJ,CAAC,CAAC;;AAEH,QAAI,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACzE,QAAI,kBAAkB,GAAG,EAAE,CAAC;;;AAG5B,oBAAgB,CAAC,OAAO,CAAC,UAAA,eAAe,EAAI;AACxC,YAAI,iBAAiB,GAAG,OAAO,CAAC,IAAI,CAAC,UAAC,IAAM;gBAAL,IAAI,GAAL,IAAM,CAAL,IAAI;mBAAM,eAAe,KAAK,IAAI;SAAA,CAAC,CAAC;AAC3E,eAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;;AAE9B,YAAI,OAAO,iBAAiB,KAAK,WAAW,EAAE;AAC1C,mBAAO,CAAC,GAAG,CAAC,iCAA8B,eAAe,EAAG,KAAK,CAAC,KAAK,CAAC,CAAC;SAC5E,MACI;AACD,8BAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC9C;KACJ,CAAC,CAAC;AACH,WAAO,kBAAkB,CAAC;CAC7B;;;AAID,IAAI,YAAY,GAAG,UAAU,EAAE,CAAC;AAChC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;AACtB,gBAAY,GAAG,MAAM,CAAC,YAAY,CAAC;CACtC;;;AAGD,IAAI,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,gDAAiB,YAAY,CAAC,CAAC,CAAC;;AAErE,kBAAkB,CAAC,IAAI,CAAC,UAAA,OAAO,EAAI;;AAE/B,WAAO,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;;AAEpB,YAAI,SAAS,YAAA,CAAC;AACd,YAAI,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC;AAC/B,YAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;;AAGvC,YAAI,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;AAC/B,qBAAS,GAAG,uCAAe,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;;;AAG1D,gBAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACvC,mBAAO,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;SAC1B;;;AAGD,YAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAS,IAAI,YAAO,WAAW,CAAC,CAAC,CAAC;;;AAG/D,kBAAU,GAAG,MAAM,CAAC,MAAM,MAAA,CAAb,MAAM,qBAAW,UAAU,EAAC,CAAC;;;AAG1C,YAAI,OAAO,SAAS,KAAK,WAAW,EAAE;AAClC,mDAAe,SAAS,EAAE,UAAU,CAAC,CAAC;SACzC;;;AAGD,YAAI,KAAK,GAAG,EAAE,CAAC;AACf,cAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAClB,MAAM,CAAC,cAAc,CAAC,CACtB,OAAO,CAAC,UAAA,OAAO,EAAI;sCACY,UAAU,CAAC,OAAO,CAAC;gBAA1C,IAAI,uBAAJ,IAAI;gBAAE,aAAa,uBAAb,aAAa;;AACxB,gBAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;;AAEzC,gBAAI,OAAO,CAAC,MAAM,EAAE;AAChB,uBAAO,CAAC,OAAO,CAAC,UAAA,MAAM,EAAI;;AAEtB,wBAAI,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,WAAW,EAAE;AACtC,6BAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;qBACtB;;AAED,wBAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,EAAK;AAC5B,4BAAI,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC;AAC7C,+BAAO,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;qBACxC,CAAC,CAAC;;AAEH,8BAAU,CAAC,OAAO,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;AAChC,yBAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;iBACrD,CAAC,CAAC;aACN,MACI;AACD,oBAAI,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EAAE;AAC1C,yBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;iBAC1B;;AAED,oBAAI,GAAG,GAAG,OAAO,CAAC;AAClB,oBAAI,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE;AAC5B,wBAAI,IAAI,GAAG,EAAE,CAAC;AACd,wBAAI,CAAC,OAAO,CAAC,8BAAiB,IAAI,YAAO,IAAI,CAAC,CAAC,CAAC;AAChD,uBAAG,GAAG,wBAAQ,SAAS,CAAC,OAAO,CAAC,CAAC;AACjC,wBAAI,GAAG,IAAI,CAAC;iBAEf,MACI,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE;AACrC,uBAAG,GAAG,wBAAQ,aAAa,CAAC,OAAO,CAAC,CAAC;iBACxC;;AAED,qBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;aACjC;SACJ,CAAC,CAAC;;;AAGP,qCAAS,KAAK,CAAC,CAAC;KACnB,CAAC,CAAC;CACN,CAAC,CAAC","file":"main.js","sourcesContent":["require(\"babel-core/polyfill\");\nvar config = require('../config.json');\nvar fs = require('fs');\nvar colors = require('colors');\nvar Promise = require('native-or-bluebird');\n\nimport {default as SpreadsheetController, fecthSpreadsheet, loadSpreadsheets}  from './src/SpreadsheetController';\nimport {parseRelations,applyRelations} from './src/RelationParser';\nimport {parseTab, parseRow, convertRowToDict} from './src/TabUtils';\nimport {write, writeAll} from './src/FileWriter';\nimport Parsers from './src/Parsers';\n\nconst relationKey = '__relation__';\n\nexport function filterTabNames(tabName) {\n    return tabName !== relationKey;\n}\n\nexport function processEnv() {\n    // print process.argv\n    let _config = config.spreadsheets;\n    let nameIdx = -1;\n\n    process.argv.forEach(function (val, index, array) {\n        if (val === '-n') {\n            nameIdx = index;\n        }\n    });\n\n    let spreadsheetNames = process.argv.splice(nameIdx, process.argv.length);\n    let spreadsheetConfigs = [];\n\n    // Get spreadsheet config (id, name)\n    spreadsheetNames.forEach(spreadsheetName => {\n        let spreadsheetConfig = _config.find(({name}) => spreadsheetName === name);\n        console.log(spreadsheetConfig)\n\n        if (typeof spreadsheetConfig === 'undefined') {\n            console.log(`No configuration found for ${spreadsheetName}`.bgRed.white);\n        }\n        else {\n            spreadsheetConfigs.push(spreadsheetConfig);\n        }\n    });\n    return spreadsheetConfigs;\n}\n\n\n// Check input\nlet spreadsheets = processEnv();\nif (!spreadsheets.length) {\n    spreadsheets = config.spreadsheets;\n}\n\n//Fetch spreadsheets\nlet spreadsheetsLoaded = Promise.all(loadSpreadsheets(spreadsheets));\n\nspreadsheetsLoaded.then(results => {\n    //Build Id links\n    results.forEach(data => {\n        //Get relations if exists\n        let relations;\n        let spreadsheet = data.results;\n        let tabKeys = Object.keys(spreadsheet);\n\n        //Check if there is a relation tab\n        if (tabKeys.includes(relationKey)) {\n            relations = parseRelations(spreadsheet[relationKey].rows);\n\n            //Remove it from keys\n            let idx = tabKeys.indexOf(relationKey);\n            tabKeys.splice(idx, 1);\n        }\n\n        //Parse tabs regular tabs\n        let parsedTabs = tabKeys.map(parseTab.bind(this, spreadsheet));\n\n        //Merge tabs\n        parsedTabs = Object.assign(...parsedTabs);\n\n        //Once we have all well parsed, let's check relations\n        if (typeof relations !== 'undefined') {\n            applyRelations(relations, parsedTabs);\n        }\n\n        //Sort by files and locales\n        let files = {};\n        Object.keys(parsedTabs)\n            .filter(filterTabNames)\n            .forEach(tabName => {\n                let {rows, localizedRows} = parsedTabs[tabName];\n                let locales = Object.keys(localizedRows);\n\n                if (locales.length) {\n                    locales.forEach(locale => {\n                        //Create locale\n                        if (typeof files[locale] === 'undefined') {\n                            files[locale] = {};\n                        }\n\n                        rows = rows.map((row, index) => {\n                            let localized = localizedRows[locale][index];\n                            return Object.assign(row, localized);\n                        });\n\n                        parsedTabs[tabName].rows = rows;\n                        files[locale][tabName] = parsedTabs[tabName].rows;\n                    });\n                }\n                else {\n                    if (typeof files[data.title] === 'undefined') {\n                        files[data.title] = {};\n                    }\n\n                    let tab = tabName;\n                    if (parsedTabs[tabName].isDict) {\n                        let dict = {};\n                        rows.forEach(convertRowToDict.bind(this, dict));\n                        tab = Parsers.cleanDict(tabName);\n                        rows = dict;\n\n                    }\n                    else if (parsedTabs[tabName].isObjParse) {\n                        tab = Parsers.cleanObjParse(tabName);\n                    }\n\n                    files[data.title][tab] = rows;\n                }\n            });\n\n        //Save all files\n        writeAll(files);\n    });\n});\n"]}