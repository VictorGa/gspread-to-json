{"version":3,"sources":["../develop/main.js"],"names":[],"mappings":";;;;4BAQsB,iBAAiB;;;;AARvC,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC/B,IAAI,qBAAqB,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC;AACnE,IAAI,UAAU,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAC7C,IAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACvC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAI5C,IAAI,SAAS,GAAG,+BAAe,CAAC;AAChC,IAAI,iBAAiB,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;AAExC,IAAI,gBAAgB,GAAG,SAAnB,gBAAgB,CAAI,IAAI,EAAyB;QAAvB,WAAW,yDAAG,IAAI;;AAE5C,WAAO,CAAC,GAAG,CAAC,yBAAsB,IAAI,EAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AACvD,WAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,YAAI,WAAW,GAAG,IAAI,qBAAqB,CAAC,IAAI,EAAE,YAAK;AACnD,uBAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;uBAAI,OAAO,CAAC,IAAI,CAAC;aAAA,EAAE,UAAA,KAAK;uBAAI,MAAM,CAAC,KAAK,CAAC;aAAA,CAAC,CAAC;SACvF,CAAC,CAAC;KACN,CAAC,CAAC;CACN,CAAC;;AAEF,IAAI,SAAS,GAAG,SAAZ,SAAS,CAAI,IAAI,EAAK;AACvB,QAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,EAAI;AACrC,eAAO,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;KACrC,CAAC,CAAC;;AAEH,WAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;CACvB,CAAA;;AAGD,IAAI,IAAI,GAAG,SAAP,IAAI,GAAe;;AAEnB,QAAI,QAAQ,GAAG,CAAC,gBAAgB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;;AAE1D,WAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO,EAAI;;;AAGlC,eAAO,CAAC,OAAO,CAAC,UAAA,WAAW,EAAI;AAC3B,kBAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACpC,2BAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO;2BAAI,SAAS,CAAC,OAAO,CAAC;iBAAA,CAAC,CAAA;aAC1D,CAAC,CAAA;SACL,CAAC,CAAA;KAEL,CAAC,CAAA;CAEL,CAAC;;AAEF,IAAI,IAAI,EAAE,CAAC","file":"main.js","sourcesContent":["require(\"babel-core/polyfill\");\nvar SpreadsheetController = require('./src/SpreadsheetController');\nvar FileWriter = require('./src/FileWriter');\nvar config = require('../config.json');\nvar fs = require('fs');\nvar colors = require('colors');\nvar Promise = require('native-or-bluebird');\n\nimport Tokenizer from './src/Tokenizer';\n\nlet tokenizer = new Tokenizer();\nlet invalidMediaProps = ['id', 'title'];\n\nlet fecthSpreadsheet = (spId, cleanSpaces = true) => {\n\n    console.log(`Fetching data from ${spId}`.bgBlue.white);\n    return new Promise((resolve, reject) => {\n        let spreadsheet = new SpreadsheetController(spId, ()=> {\n            spreadsheet.getAll(cleanSpaces).then(data => resolve(data), error => reject(error));\n        });\n    });\n};\n\nlet parseCell = (cell) => {\n   let parsed = Object.keys(cell).map(key => {\n        return tokenizer.parse(cell[key]);\n    });\n\n    console.log(parsed);\n}\n\n\nvar Main = function () {\n\n    let metadata = [fecthSpreadsheet(config.spreadsheetTest)];\n\n    Promise.all(metadata).then(results => {\n        //Build Id links\n\n        results.forEach(spreadsheet => {\n            Object.keys(spreadsheet).forEach(tab => {\n                spreadsheet[tab].forEach(element => parseCell(element))\n            })\n        })\n\n    })\n\n};\n\nnew Main();\n"]}