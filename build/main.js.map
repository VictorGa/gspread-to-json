{"version":3,"sources":["../develop/main.js"],"names":[],"mappings":";;;;;;;;;;;wCAMkE,6BAA6B;;;;iCACnD,sBAAsB;;2BACf,gBAAgB;;AARnE,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACvC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAM5C,IAAI,iBAAiB,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACxC,IAAM,WAAW,GAAG,cAAc,CAAC;;AAE5B,SAAS,cAAc,CAAC,OAAO,EACtC;AACI,WAAO,OAAO,KAAK,WAAW,CAAC;CAClC;;AAED,IAAI,IAAI,GAAG,SAAP,IAAI,GAAe;;;;AAGnB,QAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK;eAAI,gDAAiB,KAAK,CAAC;KAAA,CAAC,CAAC;;AAEnE,WAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO,EAAI;;AAElC,eAAO,CAAC,OAAO,CAAC,UAAA,WAAW,EAAI;;;AAG3B,gBAAI,SAAS,YAAA,CAAC;AACd,gBAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;AAEvC,gBAAI,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;AAC/B,yBAAS,GAAG,uCAAe,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;;;AAGrD,oBAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACvC,uBAAO,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;aAC1B;;;AAGD,gBAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAS,IAAI,QAAO,WAAW,CAAC,CAAC,CAAC;;;AAG/D,sBAAU,GAAG,MAAM,CAAC,MAAM,MAAA,CAAb,MAAM,qBAAW,UAAU,EAAC,CAAC;;;AAG1C,gBAAI,OAAO,SAAS,KAAK,WAAW,EAAE;AAClC,uDAAe,SAAS,EAAE,UAAU,CAAC,CAAC;aACzC;;AAED,kBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO,EAAI;oBACzD,IAAI,GAAI,UAAU,CAAC,OAAO,CAAC,CAA3B,IAAI;;AAET,oBAAI,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE;AAC5B,wBAAI,IAAI,GAAG,EAAE,CAAC;AACd,wBAAI,CAAC,OAAO,CAAC,8BAAiB,IAAI,QAAO,IAAI,CAAC,CAAC,CAAC;AAChD,8BAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;iBAC9B,MAED;AACI,8BAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;iBAC9B;aACJ,CAAC,CAAC;;;SAGN,CAAC,CAAA;KAEL,CAAC,CAAA;CAEL,CAAC;;AAEF,IAAI,IAAI,EAAE,CAAC","file":"main.js","sourcesContent":["require(\"babel-core/polyfill\");\nvar config = require('../config.json');\nvar fs = require('fs');\nvar colors = require('colors');\nvar Promise = require('native-or-bluebird');\n\nimport {default as SpreadsheetController, fecthSpreadsheet}  from './src/SpreadsheetController';\nimport {parseRelations,applyRelations} from './src/RelationParser';\nimport {parseTab, parseRow, convertRowToDict} from './src/TabUtils';\n\nlet invalidMediaProps = ['id', 'title'];\nconst relationKey = '__relation__';\n\nexport function filterTabNames(tabName)\n{\n    return tabName !== relationKey;\n}\n\nvar Main = function () {\n\n    //Loop sheets\n    let metadata = config.sheets.map(sheet => fecthSpreadsheet(sheet));\n\n    Promise.all(metadata).then(results => {\n        //Build Id links\n        results.forEach(spreadsheet => {\n\n            //Get relations if exists\n            let relations;\n            let tabKeys = Object.keys(spreadsheet);\n\n            if (tabKeys.includes(relationKey)) {\n                relations = parseRelations(spreadsheet[relationKey]);\n\n                //Remove it from keys\n                let idx = tabKeys.indexOf(relationKey);\n                tabKeys.splice(idx, 1);\n            }\n\n            //Parse tabs regular tabs\n            let parsedTabs = tabKeys.map(parseTab.bind(this, spreadsheet));\n\n            //Merge tabs\n            parsedTabs = Object.assign(...parsedTabs);\n\n            //Once we have all well parsed, let's check relations\n            if (typeof relations !== 'undefined') {\n                applyRelations(relations, parsedTabs);\n            }\n\n            Object.keys(parsedTabs).filter(filterTabNames).forEach(tabName => {\n                let {rows} = parsedTabs[tabName];\n\n                if (parsedTabs[tabName].isDict) {\n                    let dict = {};\n                    rows.forEach(convertRowToDict.bind(this, dict));\n                    parsedTabs[tabName] = dict;\n                }\n                else\n                {\n                    parsedTabs[tabName] = rows;\n                }\n            });\n\n            //console.log(parsedTabs);\n        })\n\n    })\n\n};\n\nnew Main();\n"]}