{"version":3,"sources":["../develop/main.js"],"names":[],"mappings":";;;;;;;;;;;wCAMkE,6BAA6B;;;;iCACnD,sBAAsB;;2BACf,gBAAgB;;AARnE,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACvC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,OAAO,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAM5C,IAAI,iBAAiB,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACxC,IAAM,WAAW,GAAG,cAAc,CAAC;;AAE5B,SAAS,cAAc,CAAC,OAAO,EACtC;AACC,QAAO,OAAO,KAAK,WAAW,CAAC;CAC/B;;AAED,IAAI,IAAI,GAAG,SAAP,IAAI,GACR;;;AAEC,KAAI,QAAQ,GAAG,CAAC,gDAAiB,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAElE,QAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO,EAClC;;AAEC,SAAO,CAAC,OAAO,CAAC,UAAA,WAAW,EAC3B;;AAEC,OAAI,SAAS,YAAA,CAAC;AACd,OAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;AAEvC,OAAG,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,EAChC;AACC,aAAS,GAAG,uCAAe,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;;;AAG1D,QAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AACvC,WAAO,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACvB;;;AAGD,OAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAS,IAAI,QAAO,WAAW,CAAC,CAAC,CAAC;;;AAG/D,aAAU,GAAG,MAAM,CAAC,MAAM,MAAA,CAAb,MAAM,qBAAW,UAAU,EAAC,CAAC;;;AAG1C,OAAG,OAAO,SAAS,KAAK,WAAW,EACnC;AACC,2CAAe,SAAS,EAAE,UAAU,CAAC,CAAC;IACtC;;AAED,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CACrB,MAAM,CAAC,cAAc,CAAC,CACtB,OAAO,CAAC,UAAA,OAAO,EAChB;QACM,IAAI,GAAI,UAAU,CAAC,OAAO,CAAC,CAA3B,IAAI;;AAET,QAAG,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,EAC7B;AACC,SAAI,IAAI,GAAG,EAAE,CAAC;AACd,SAAI,CAAC,OAAO,CAAC,8BAAiB,IAAI,QAAO,IAAI,CAAC,CAAC,CAAC;AAChD,eAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;KAC3B,MAED;AACC,eAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;KAC3B;IACD,CAAC,CAAC;;AAEJ,UAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;GACxB,CAAC,CAAA;EAEF,CAAC,CAAA;CAEF,CAAC;;AAEF,IAAI,IAAI,EAAE,CAAC","file":"main.js","sourcesContent":["require(\"babel-core/polyfill\");\r\nvar config = require('../config.json');\r\nvar fs = require('fs');\r\nvar colors = require('colors');\r\nvar Promise = require('native-or-bluebird');\r\n\r\nimport {default as SpreadsheetController, fecthSpreadsheet}  from './src/SpreadsheetController';\r\nimport {parseRelations,applyRelations} from './src/RelationParser';\r\nimport {parseTab, parseRow, convertRowToDict} from './src/TabUtils';\r\n\r\nlet invalidMediaProps = ['id', 'title'];\r\nconst relationKey = '__relation__';\r\n\r\nexport function filterTabNames(tabName)\r\n{\r\n\treturn tabName !== relationKey;\r\n}\r\n\r\nvar Main = function()\r\n{\r\n\r\n\tlet metadata = [fecthSpreadsheet(config.spreadsheetTranslations)];\r\n\r\n\tPromise.all(metadata).then(results =>\r\n\t{\r\n\t\t//Build Id links\r\n\t\tresults.forEach(spreadsheet =>\r\n\t\t{\r\n\t\t\t//Get relations if exists\r\n\t\t\tlet relations;\r\n\t\t\tlet tabKeys = Object.keys(spreadsheet);\r\n\r\n\t\t\tif(tabKeys.includes(relationKey))\r\n\t\t\t{\r\n\t\t\t\trelations = parseRelations(spreadsheet[relationKey].rows);\r\n\r\n\t\t\t\t//Remove it from keys\r\n\t\t\t\tlet idx = tabKeys.indexOf(relationKey);\r\n\t\t\t\ttabKeys.splice(idx, 1);\r\n\t\t\t}\r\n\r\n\t\t\t//Parse tabs regular tabs\r\n\t\t\tlet parsedTabs = tabKeys.map(parseTab.bind(this, spreadsheet));\r\n\r\n\t\t\t//Merge tabs\r\n\t\t\tparsedTabs = Object.assign(...parsedTabs);\r\n\r\n\t\t\t//Once we have all well parsed, let's check relations\r\n\t\t\tif(typeof relations !== 'undefined')\r\n\t\t\t{\r\n\t\t\t\tapplyRelations(relations, parsedTabs);\r\n\t\t\t}\r\n\r\n\t\t\tObject.keys(parsedTabs)\r\n\t\t\t\t.filter(filterTabNames)\r\n\t\t\t\t.forEach(tabName =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet {rows} = parsedTabs[tabName];\r\n\r\n\t\t\t\t\tif(parsedTabs[tabName].isDict)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet dict = {};\r\n\t\t\t\t\t\trows.forEach(convertRowToDict.bind(this, dict));\r\n\t\t\t\t\t\tparsedTabs[tabName] = dict;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tparsedTabs[tabName] = rows;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\tconsole.log(parsedTabs);\r\n\t\t})\r\n\r\n\t})\r\n\r\n};\r\n\r\nnew Main();\r\n"]}